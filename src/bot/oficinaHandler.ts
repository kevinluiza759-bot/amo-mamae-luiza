import { collection, addDoc, getDocs, updateDoc, doc, query, where } from 'firebase/firestore';
import { db } from '@/firebase';
import type { BotResponse, Viatura, ViaturaNaOficina, Oficina } from './types';

// Padr√µes para entrada na oficina
const entradaPatterns = [
  'registrar entrada', 'entrada oficina', 'levar oficina', 'deixar oficina',
  'entrada na oficina', 'colocar oficina', 'mandar oficina'
];

// Padr√µes para sa√≠da da oficina  
const saidaPatterns = [
  'registrar sa√≠da', 'sa√≠da oficina', 'retirar oficina', 'buscar oficina',
  'sa√≠da da oficina', 'pegar oficina', 'finalizar servi√ßo'
];

export async function handleEntradaOficina(input: string): Promise<BotResponse> {
  const inputLower = input.toLowerCase();
  
  // Verifica se √© solicita√ß√£o de entrada
  const isEntrada = entradaPatterns.some(pattern => inputLower.includes(pattern));
  
  if (isEntrada) {
    return {
      type: 'form_entrada_oficina'
    };
  }
  
  return {
    type: 'text',
    text: 'Para registrar entrada na oficina, diga "registrar entrada" ou "levar para oficina".'
  };
}

export async function handleSaidaOficina(input: string): Promise<BotResponse> {
  const inputLower = input.toLowerCase();
  
  // Verifica se √© solicita√ß√£o de sa√≠da
  const isSaida = saidaPatterns.some(pattern => inputLower.includes(pattern));
  
  if (isSaida) {
    return {
      type: 'form_saida_oficina'
    };
  }
  
  return {
    type: 'text',
    text: 'Para registrar sa√≠da da oficina, diga "registrar sa√≠da" ou "retirar da oficina".'
  };
}

export async function processarEntradaOficina(
  cadastro: string,
  dataEntrada: string,
  servicoRealizar: string,
  oficina: string
): Promise<string> {
  try {
    console.log('Processando entrada para cadastro:', cadastro);
    
    // Buscar dados da viatura
    const viaturasSnapshot = await getDocs(collection(db, 'frota'));
    const viatura = viaturasSnapshot.docs
      .map(doc => ({ id: doc.id, ...doc.data() } as Viatura))
      .find(v => {
        // Garantir que CADASTRO √© string antes de usar toLowerCase
        const viaturaCadastro = String(v.CADASTRO || '').trim();
        const searchCadastro = String(cadastro || '').trim();
        
        console.log('Comparando:', viaturaCadastro, 'com', searchCadastro);
        
        return viaturaCadastro.toLowerCase() === searchCadastro.toLowerCase();
      });
    
    if (!viatura) {
      console.log('Viatura n√£o encontrada:', cadastro);
      return `Viatura ${cadastro} n√£o encontrada na frota.`;
    }

    console.log('Viatura encontrada:', viatura);

    // Verificar se a viatura j√° est√° na oficina
    const oficinaQuery = query(
      collection(db, 'oficina'),
      where('cadastro', '==', String(viatura.CADASTRO)),
      where('status', '==', 'na-oficina')
    );
    const oficinaSnapshot = await getDocs(oficinaQuery);
    
    if (!oficinaSnapshot.empty) {
      return `A viatura ${cadastro} j√° est√° registrada na oficina.`;
    }

    // Registrar entrada na oficina
    await addDoc(collection(db, 'oficina'), {
      cadastro: String(viatura.CADASTRO),
      placa: String(viatura.PLACA || ''),
      modelo: String(viatura.MODELO || ''),
      dataEntrada,
      servicoRealizar,
      oficina,
      status: 'na-oficina',
      createdAt: new Date().toISOString()
    });

    return `‚úÖ Entrada registrada com sucesso!\n\nViatura: ${viatura.CADASTRO}\nPlaca: ${viatura.PLACA}\nOficina: ${oficina}\nServi√ßo: ${servicoRealizar}`;
  } catch (error) {
    console.error('Erro ao registrar entrada na oficina:', error);
    return 'Erro ao registrar entrada na oficina. Tente novamente.';
  }
}

export async function processarSaidaOficina(
  cadastro: string,
  dataSaida: string,
  observacaoServico: string
): Promise<string> {
  try {
    // Buscar viatura na oficina
    const oficinaQuery = query(
      collection(db, 'oficina'),
      where('cadastro', '==', cadastro),
      where('status', '==', 'na-oficina')
    );
    const oficinaSnapshot = await getDocs(oficinaQuery);
    
    if (oficinaSnapshot.empty) {
      return `A viatura ${cadastro} n√£o est√° registrada na oficina ou j√° teve sua sa√≠da processada.`;
    }

    const viaturaDoc = oficinaSnapshot.docs[0];
    
    // Atualizar com dados de sa√≠da
    await updateDoc(doc(db, 'oficina', viaturaDoc.id), {
      dataSaida,
      observacaoServico,
      status: 'os-pendente'
    });

    const viatura = viaturaDoc.data() as ViaturaNaOficina;
    
    return `‚úÖ Sa√≠da registrada com sucesso!\n\nViatura: ${viatura.cadastro}\nPlaca: ${viatura.placa}\nOficina: ${viatura.oficina}\nServi√ßo realizado: ${observacaoServico}\n\nStatus: Aguardando cria√ß√£o de OS`;
  } catch (error) {
    console.error('Erro ao registrar sa√≠da da oficina:', error);
    return 'Erro ao registrar sa√≠da da oficina. Tente novamente.';
  }
}

export async function listarViaturasNaOficina(): Promise<string> {
  try {
    const oficinaQuery = query(
      collection(db, 'oficina'),
      where('status', '==', 'na-oficina')
    );
    const oficinaSnapshot = await getDocs(oficinaQuery);
    
    if (oficinaSnapshot.empty) {
      return 'Nenhuma viatura est√° atualmente na oficina.';
    }

    const viaturas = oficinaSnapshot.docs.map(doc => doc.data() as ViaturaNaOficina);
    
    let texto = 'üîß Viaturas na oficina:\n\n';
    viaturas.forEach((viatura, index) => {
      texto += `${index + 1}. ${viatura.cadastro} - ${viatura.placa}\n`;
      texto += `   Oficina: ${viatura.oficina}\n`;
      texto += `   Entrada: ${new Date(viatura.dataEntrada).toLocaleDateString()}\n`;
      texto += `   Servi√ßo: ${viatura.servicoRealizar}\n\n`;
    });
    
    return texto;
  } catch (error) {
    console.error('Erro ao listar viaturas na oficina:', error);
    return 'Erro ao consultar viaturas na oficina.';
  }
}

export async function listarOficinas(): Promise<Oficina[]> {
  try {
    const snapshot = await getDocs(collection(db, 'oficinas'));
    return snapshot.docs.map(doc => ({ id: doc.id, nome: doc.data().nome } as Oficina));
  } catch (error) {
    console.error('Erro ao buscar oficinas:', error);
    return [];
  }
}

export async function buscarServicosPorTipo(tipoServico: string): Promise<string> {
  // Solicitar autentica√ß√£o para esta funcionalidade
  return 'Para buscar servi√ßos, √© necess√°rio autentica√ß√£o.\n\nüîê Por favor, informe sua matr√≠cula e senha de usu√°rio com acesso ao GEST√ÉO E LOG√çSTICA.';
}

export async function consultarOSPorNumero(numeroOS: string): Promise<string> {
  try {
    // Buscar OS pelo n√∫mero
    const osRef = collection(db, 'ordensDeServico');
    const q = query(osRef, where('numeroOS', '==', String(numeroOS).trim()));
    const snapshot = await getDocs(q);

    if (snapshot.empty) {
      return `Nenhuma OS encontrada com o n√∫mero ${numeroOS}.`;
    }

    const os = snapshot.docs[0].data() as any;

    // Montar resposta amig√°vel
    const linhas: string[] = [];
    linhas.push('üìÑ Ordem de Servi√ßo');
    linhas.push('');
    linhas.push(`N√∫mero da OS: ${os.numeroOS || '‚Äî'}`);
    linhas.push(`Data: ${os.dataOS || '‚Äî'}`);
    linhas.push('');
    linhas.push('üöì Viatura');
    linhas.push(`Cadastro: ${os.cadastroViatura || '‚Äî'}`);
    linhas.push(`Placa: ${os.placaViatura || '‚Äî'}`);
    linhas.push(`Modelo: ${os.modeloViatura || '‚Äî'}`);
    linhas.push('');
    linhas.push('üè≠ Oficina');
    linhas.push(`Oficina: ${os.oficinaResponsavel || '‚Äî'}`);
    linhas.push(`N¬∫ Oficina: ${os.numeroOficina || '‚Äî'}`);
    linhas.push('');
    linhas.push('üí∞ Valores');
    linhas.push(`Valor OS: ${os.valorOS || '‚Äî'}`);
    linhas.push(`Cota mensal: ${os.cotaMensal || '‚Äî'}`);
    linhas.push(`Saldo dispon√≠vel: ${os.saldoDisponivel || '‚Äî'}`);
    linhas.push(`Tipo de frota: ${os.tipoFrota || '‚Äî'}`);
    if (os.defeitoRelatado) {
      linhas.push('');
      linhas.push('üìù Defeito relatado');
      linhas.push(`${os.defeitoRelatado}`);
    }

    return linhas.join('\n');
  } catch (error) {
    console.error('Erro ao consultar OS por n√∫mero:', error);
    return 'Erro ao consultar a OS. Tente novamente.';
  }
}